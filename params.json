{"name":"q","tagline":"q - Text as Data","body":"# q - Text as Data\r\n\r\n## SYNOPSIS\r\n\t`q <flags> <query>`\r\n\r\n\tSimplest execution is `q \"SELECT * FROM myfile\"` which prints the entire file.\r\n\r\n## DESCRIPTION\r\nq allows performing SQL-like statements on tabular text data. Its purpose is to bring SQL expressive power to the Linux command line and to provide easy access to text as actual data.\r\n\r\nQuery should be an SQL-like query which contains filenames instead of table names (or - for stdin). The query itself should be provided as one parameter to the tool (i.e. enclosed in quotes).\r\n\r\nUse `-H` to signify that the input contains a header line. Column names will be detected automatically in that case, and can be used in the query. If this option is not provided, columns will be named cX, starting with 1 (e.g. q \"SELECT c3,c8 from ...\").\r\n\r\nUse `-d` to specify the input delimiter.\r\n\r\nColumn types are auto detected by the tool, no casting is needed.\r\n\r\nPlease note that column names that include spaces need to be used in the query with back-ticks, as per the sqlite standard.\r\n\r\nQuery/Input/Output encodings are fully supported (and q tries to provide out-of-the-box usability in that area). Please use `-e`,`-E` and `-Q` to control encoding if needed.\r\n\r\nAll sqlite3 SQL constructs are supported, including joins across files (use an alias for each table).\r\n\r\nSee https://github.com/harelba/q for more details.\r\n\r\n## QUERY\r\nq gets one parameter - An SQL-like query. \r\n\r\nAny standard SQL expression, condition (both WHERE and HAVING), GROUP BY, ORDER BY etc. are allowed.\r\n\r\nJOINs are supported and Subqueries are supported in the WHERE clause, but unfortunately not in the FROM clause for now. Use table aliases when performing JOINs.\r\n\r\nThe SQL syntax itself is sqlite's syntax. For details look at http://www.sqlite.org/lang.html or search the net for examples.\r\n\r\n**NOTE:** Full type detection is implemented, so there is no need for any casting or anything.\r\n\r\n**NOTE2:** When using the `-O` output header option, use column name aliases if you want to control the output column names. For example, `q -O -H \"select count(*) cnt,sum(*) as mysum from -\"` would output `cnt` and `mysum` as the output header column names.\r\n\r\n## RUNTIME OPTIONS\r\nq can also get some runtime flags. The following parameters can be used, all optional:\r\n\r\n````\r\nOptions:\r\n  -h, --help            show this help message and exit\r\n  -v, --version         Print version\r\n\r\n  Input Data Options:\r\n    -H, --skip-header   Skip header row. This has been changed from earlier\r\n                        version - Only one header row is supported, and the\r\n                        header row is used for column naming\r\n    -d DELIMITER, --delimiter=DELIMITER\r\n                        Field delimiter. If none specified, then space is used\r\n                        as the delimiter.\r\n    -t, --tab-delimited\r\n                        Same as -d <tab>. Just a shorthand for handling\r\n                        standard tab delimited file You can use $'\\t' if you\r\n                        want (this is how Linux expects to provide tabs in the\r\n                        command line)\r\n    -e ENCODING, --encoding=ENCODING\r\n                        Input file encoding. Defaults to UTF-8. set to none\r\n                        for not setting any encoding - faster, but at your own\r\n                        risk...\r\n    -z, --gzipped       Data is gzipped. Useful for reading from stdin. For\r\n                        files, .gz means automatic gunzipping\r\n    -A, --analyze-only  Analyze sample input and provide information about\r\n                        data types\r\n    -m MODE, --mode=MODE\r\n                        Data parsing mode. fluffy, relaxed and strict. In\r\n                        strict mode, the -c column-count parameter must \r\n                        be supplied as well\r\n    -c COLUMN_COUNT, --column-count=COLUMN_COUNT\r\n                        Specific column count when using relaxed or strict\r\n                        mode\r\n    -k, --keep-leading-whitespace\r\n                        Keep leading whitespace in values. Default behavior\r\n                        strips leading whitespace off values, in order to\r\n                        provide out-of-the-box usability for simple use cases.\r\n                        If you need to preserve whitespace, use this flag.\r\n\r\n  Output Options:\r\n    -D OUTPUT_DELIMITER, --output-delimiter=OUTPUT_DELIMITER\r\n                        Field delimiter for output. If none specified, then\r\n                        the -d delimiter is used if present, or space if no\r\n                        delimiter is specified\r\n    -T, --tab-delimited-output\r\n                        Same as -D <tab>. Just a shorthand for outputing tab\r\n                        delimited output. You can use -D $'\\t' if you want.\r\n    -O, --output-header\r\n                        Output header line. Output column-names are determined\r\n                        from the query itself. Use column aliases in order to\r\n                        set your column names in the query. For example,\r\n                        'select name FirstName,value1/value2 MyCalculation\r\n                        from ...'. This can be used even if there was no\r\n                        header in the input.\r\n    -b, --beautify      Beautify output according to actual values. Might be\r\n                        slow...\r\n    -f FORMATTING, --formatting=FORMATTING\r\n                        Output-level formatting, in the format X=fmt,Y=fmt\r\n                        etc, where X,Y are output column numbers (e.g. 1 for\r\n                        first SELECT column etc.\r\n    -E OUTPUT_ENCODING, --output-encoding=OUTPUT_ENCODING\r\n                        Output encoding. Defaults to 'none', leading to\r\n                        selecting the system/terminal encoding\r\n\r\n  Query Related Options:\r\n    -q QUERY_FILENAME, --query-filename=QUERY_FILENAME\r\n                        Read query from the provided filename instead of the\r\n                        command line, possibly using the provided query\r\n                        encoding (using -Q).\r\n    -Q QUERY_ENCODING, --query-encoding=QUERY_ENCODING\r\n                        query text encoding. Experimental. Please send your\r\n                        feedback on this\r\n\r\n````\r\n\r\n### Table names\r\nThe table names are the actual file names that you want to read from. Path names are allowed. Use \"-\" if you want to read from stdin (e.g. `q \"SELECT * FROM -\"`)\r\n\r\nMultiple files can be concatenated by using one of both of the following ways:\r\n\r\n* Separating the filenames with a + sign: `SELECT * FROM datafile1+datafile2+datefile3`.\r\n* Using glob matching: `SELECT * FROM mydata*.dat`\r\n\r\nFiles with .gz extension are considered to be gzipped and decompressed on the fly.\r\n\r\n### Parsing Modes\r\nq supports multiple parsing modes:\r\n\r\n* `relaxed` - This is the default mode. It tries to lean towards simplicity of use. When a row doesn't contains enough columns, they'll be filled with nulls, and when there are too many, the extra values will be merged to the last column. Defining the number of expected columns in this mode is done using the `-c` parameter. If it is not provided, then the number of columns is detected automatically (In most use cases, there is no need to specify `-c`)\r\n* `strict` - Strict mode is for hardcoce csv/tsv parsing. Whenever a row doesn't contain the proper number of columns, processing will stop. `-c` must be provided when using this mode\r\n* `fluffy` - This mode should not be used, and is just some kind of \"backward compatible\" parsing mode which was used by q previously. It's left as a separate parsing mode on purpose, in order to accomodate existing users. If you are such a user, please open a bug for your use case, and I'll see how I can incorporate it into the other modes. It is reasonable to say that this mode will be removed in the future.\r\n\r\n### Output formatting option\r\nThe format of F is as a list of X=f separated by commas, where X is a column number and f is a python format:\r\n\r\n* X - column number - This is the SELECTed column (or expression) number, not the one from the original table. E.g, 1 is the first SELECTed column, 3 is the third SELECTed column.\r\n* f - A python formatting string - See http://docs.python.org/release/2.4.4/lib/typesseq-strings.html for details if needed.\r\n** Example: `-f 3=%-10s,5=%4.3f,1=%x`\r\n\r\n## EXAMPLES\r\nExample 1: `ls -ltrd * | q \"select c1,count(1) from - group by c1\"`\r\n\r\n\tThis example would print a count of each unique permission string in the current folder.\r\n\r\nExample 2: `seq 1 1000 | q \"select avg(c1),sum(c1) from -\"`\r\n\r\n\tThis example would provide the average and the sum of the numbers in the range 1 to 1000\r\n\r\nExample 3: `sudo find /tmp -ls | q \"select c5,c6,sum(c7)/1024.0/1024 as total from - group by c5,c6 order by total desc\"`\r\n\r\n\tThis example will output the total size in MB per user+group in the /tmp subtree\r\n\r\nExample 4: `ps -ef | q -H \"select UID,count(*) cnt from - group by UID order by cnt desc limit 3\"`\r\n\r\n\tThis example will show process counts per UID, calculated from ps data. Note that the column names provided by ps are being used as column name in the query (The -H flag activates that option)\r\n\r\n## AUTHOR\r\nHarel Ben-Attia (harelba@gmail.com)\r\n\r\n[@harelba](https://twitter.com/harelba) on Twitter\r\n\r\nAny feedback/suggestions/complaints regarding this tool would be much appreciated. Contributions are most welcome as well, of course.\r\n\r\n## COPYRIGHT\r\nCopyright (C) 2012--2014 Harel Ben Attia\r\n\r\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3, or (at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA \r\n","google":"UA-48316355-1","note":"Don't delete this file! It's used internally to help with page regeneration."}